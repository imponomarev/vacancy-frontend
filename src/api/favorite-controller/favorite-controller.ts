/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Vacancy } from ".././model";

import { axiosFetcher } from "../../lib/axios-fetcher";

export const list1 = (signal?: AbortSignal) => {
  return axiosFetcher<Vacancy[]>({ url: `/favorites`, method: "GET", signal });
};

export const getList1QueryKey = () => {
  return [`/favorites`] as const;
};

export const getList1QueryOptions = <
  TData = Awaited<ReturnType<typeof list1>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof list1>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getList1QueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof list1>>> = ({
    signal,
  }) => list1(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof list1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type List1QueryResult = NonNullable<Awaited<ReturnType<typeof list1>>>;
export type List1QueryError = unknown;

export function useList1<
  TData = Awaited<ReturnType<typeof list1>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof list1>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof list1>>,
          TError,
          Awaited<ReturnType<typeof list1>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useList1<
  TData = Awaited<ReturnType<typeof list1>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof list1>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof list1>>,
          TError,
          Awaited<ReturnType<typeof list1>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useList1<
  TData = Awaited<ReturnType<typeof list1>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof list1>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useList1<
  TData = Awaited<ReturnType<typeof list1>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof list1>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getList1QueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const like1 = (vacancy: Vacancy, signal?: AbortSignal) => {
  return axiosFetcher<void>({
    url: `/favorites`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: vacancy,
    signal,
  });
};

export const getLike1MutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof like1>>,
    TError,
    { data: Vacancy },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof like1>>,
  TError,
  { data: Vacancy },
  TContext
> => {
  const mutationKey = ["like1"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof like1>>,
    { data: Vacancy }
  > = (props) => {
    const { data } = props ?? {};

    return like1(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type Like1MutationResult = NonNullable<
  Awaited<ReturnType<typeof like1>>
>;
export type Like1MutationBody = Vacancy;
export type Like1MutationError = unknown;

export const useLike1 = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof like1>>,
      TError,
      { data: Vacancy },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof like1>>,
  TError,
  { data: Vacancy },
  TContext
> => {
  const mutationOptions = getLike1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const unlike1 = (source: string, externalId: string) => {
  return axiosFetcher<void>({
    url: `/favorites/${source}/${externalId}`,
    method: "DELETE",
  });
};

export const getUnlike1MutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlike1>>,
    TError,
    { source: string; externalId: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unlike1>>,
  TError,
  { source: string; externalId: string },
  TContext
> => {
  const mutationKey = ["unlike1"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unlike1>>,
    { source: string; externalId: string }
  > = (props) => {
    const { source, externalId } = props ?? {};

    return unlike1(source, externalId);
  };

  return { mutationFn, ...mutationOptions };
};

export type Unlike1MutationResult = NonNullable<
  Awaited<ReturnType<typeof unlike1>>
>;

export type Unlike1MutationError = unknown;

export const useUnlike1 = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof unlike1>>,
      TError,
      { source: string; externalId: string },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof unlike1>>,
  TError,
  { source: string; externalId: string },
  TContext
> => {
  const mutationOptions = getUnlike1MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
