/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Resume, Search1Params } from ".././model";

import { axiosFetcher } from "../../lib/axios-fetcher";

export const search1 = (params: Search1Params, signal?: AbortSignal) => {
  return axiosFetcher<Resume[]>({
    url: `/resumes`,
    method: "GET",
    params,
    signal,
  });
};

export const getSearch1QueryKey = (params: Search1Params) => {
  return [`/resumes`, ...(params ? [params] : [])] as const;
};

export const getSearch1QueryOptions = <
  TData = Awaited<ReturnType<typeof search1>>,
  TError = unknown,
>(
  params: Search1Params,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search1>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearch1QueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof search1>>> = ({
    signal,
  }) => search1(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof search1>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type Search1QueryResult = NonNullable<
  Awaited<ReturnType<typeof search1>>
>;
export type Search1QueryError = unknown;

export function useSearch1<
  TData = Awaited<ReturnType<typeof search1>>,
  TError = unknown,
>(
  params: Search1Params,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search1>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof search1>>,
          TError,
          Awaited<ReturnType<typeof search1>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearch1<
  TData = Awaited<ReturnType<typeof search1>>,
  TError = unknown,
>(
  params: Search1Params,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search1>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof search1>>,
          TError,
          Awaited<ReturnType<typeof search1>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearch1<
  TData = Awaited<ReturnType<typeof search1>>,
  TError = unknown,
>(
  params: Search1Params,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search1>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSearch1<
  TData = Awaited<ReturnType<typeof search1>>,
  TError = unknown,
>(
  params: Search1Params,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof search1>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearch1QueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
